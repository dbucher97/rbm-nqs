#! /usr/bin/env python3
# Copyright (C) 2021  David Bucher <David.Bucher@physik.lmu.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import fileinput
import matplotlib.pyplot as plt
import argparse
import numpy as np
import threading


def parse_line(line):
    try:
        vals = line.strip().split(',')
        if(len(vals) == 1):
            return float(vals[0])
        else:
            return [float(val) for val in vals]
    except ValueError:
        return 0


def get_others(args):
    othervals = []
    for o in args.other:
        with open(o, 'r') as f:
            othervals.append(np.array([parse_line(l)
                                       for l in f if not l.startswith('#')]))
    return othervals


def read_input(vals, args, run_event):
    for line in fileinput.input(args.input):
        line = str(line)
        print(line, end='')
        if(line.startswith('#')):
            continue
        vals.append(parse_line(line))
        if not run_event.is_set():
            run_event.set()


def plot_routine(vals, othervals, args, run_event):
    plt.ion()
    _, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    plt.show()

    while run_event.wait():
        run_event.clear()
        v = np.array(vals)
        if len(v.shape) > 1:
            v0 = v[:, 0]
        else:
            v0 = v
        vavg = None
        if(len(vals) > 200):
            vavg = np.mean(v0[-100:])

        ax1.cla()
        ax1.set_xlabel('Iteration')
        ax1.set_ylabel('Energy per site')
        ax2.set_ylabel('Acceptance Rate (green)')
        shps = ['green', 'orange', 'gray']

        if len(v.shape) > 1:
            ax2.cla()
            shi = 0
            for vi in v[:, 1:].T:
                ax2.plot(vi, color=shps[shi], linestyle=':')
                # ax2.set_ylim((0, 1))
                shi += 1

        for other in othervals:
            x = min(len(vals), len(other))
            ax1.plot(other[:x])

        if vavg is not None:
            ax1.axhline(y=vavg, color='b')
            ax1.text(10, vavg - 0.03, f'{vavg:.5f}')
        if args.reference is not None:
            ax1.axhline(y=args.reference, color='r', linestyle='--')

        ax1.plot(v0, 'k', linewidth=2)
        ax1.set_zorder(ax2.get_zorder()+1)
        ax1.patch.set_visible(False)

        if args.reference is not None:
            ax1.set_ylim((args.reference - 0.05, v0[0] + 0.05))
        plt.draw()
        plt.pause(0.01)


def main():
    parser = argparse.ArgumentParser(description='Plot stdin values live.')
    parser.add_argument('-r', '--reference', type=float)
    parser.add_argument('-i', '--input', type=str, default='-')
    parser.add_argument('other', nargs='*')
    args = parser.parse_args()

    othervals = get_others(args)

    vals = []

    run_event = threading.Event()

    th = threading.Thread(target=read_input, args=(vals, args, run_event))
    th.start()
    try:
        plot_routine(vals, othervals, args, run_event)
    except KeyboardInterrupt:
        run_event.clear()
        th.join()


if __name__ == '__main__':
    main()
