#! /usr/bin/env python3
# Copyright (C) 2021  David Bucher <David.Bucher@physik.lmu.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import fileinput
import matplotlib.pyplot as plt
import argparse
import math
import numpy as np


def parse_line(line):
    ret = []
    try:
        vals = line.strip().split(',')
        if(len(vals) == 1):
            return float(vals[0])
        else:
            return [float(val) for val in vals]
    except ValueError:
        return 0


parser = argparse.ArgumentParser(description='Plot stdin values live.')
parser.add_argument('-r', '--reference', type=float)
parser.add_argument('-i', '--input', type=str, default='-')
parser.add_argument('other', nargs='*')
args = parser.parse_args()

othervals = []
for o in args.other:
    with open(o, 'r') as f:
        othervals.append(np.array([parse_line(l) for l in f if not
                                   l.startswith('#')]))
vals = []

plt.ion()
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
plt.show()


for line in fileinput.input(args.input):
    print(line, end='')
    if(line.startswith('#')):
        continue
    ax1.cla()
    vals.append(parse_line(line))
    v = np.array(vals)
    if len(v.shape) > 1:
        v0 = v[:, 0]
    else:
        v0 = v
    vavg = None
    if(len(vals) > 200):
        vavg = np.mean(v0[-100:])


    ax1.set_xlabel('Iteration')
    ax1.set_ylabel('Energy per site')
    ax2.set_ylabel('Energy Variance (gray) / Acceptance Rate (green)')
    shps = ['gray', 'green', 'orange']
    if len(v.shape) > 1:
        ax2.cla()
        shi = 0
        for vi in v[:, 1:].T:
            ax2.plot(vi, color=shps[shi], linestyle=':')
            ax2.set_ylim((0, 1))
            shi += 1

    for other in othervals:
        x = min(len(vals), len(other))
        ax1.plot(other[:x])

    if vavg is not None:
        ax1.axhline(y=vavg, color='b')
        ax1.text(10, vavg - 0.03, f'{vavg:.5f}')
    if args.reference is not None:
        ax1.axhline(y=args.reference, color='r', linestyle='--')


    ax1.plot(v0, 'k', linewidth=2)
    ax1.set_zorder(ax2.get_zorder()+1)
    ax1.patch.set_visible(False)

    if args.reference is not None:
        ax1.set_ylim((args.reference - 0.05, v0[0] + 0.05))
    plt.draw()
    plt.pause(0.00001)

#  plt.ioff()
#  plt.clf()
#  plt.plot(vals, 'k', linewidth=2)
#  plt.show()
